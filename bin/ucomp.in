#!/usr/bin/env python

import argparse
import datetime
import glob
import os
import psutil
import re
import subprocess
import time


PY3 = sys.version_info[0] == 3

if PY3:
    import configparser
else:
    import ConfigParser as configparser


POLL_SECS = 0.1

LEVELS = ['DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']
LOG_DIR = '/hao/acos/ucomp/logs'

DATE_FORMAT = '%Y%m%d'

DEVNULL = open(os.devnull, 'w')
PIPELINE_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


# date handling helpers

intervals = (
    ('weeks', 604800),  # 60 * 60 * 24 * 7 seconds
    ('days', 86400),    # 60 * 60 * 24 seconds
    ('hrs', 3600),      # 60 * 60 seconds
    ('mins', 60),
    ('secs', 1),
    )

def display_time(seconds, granularity=2):
    result = []

    for name, count in intervals:
        value = seconds // count
        if value:
            seconds -= value * count
            if value == 1:
                name = name.rstrip('s')
            result.append("%d %s" % (value, name))
    return ' '.join(result[:granularity])


def format_timedelta(timedelta):
    return(display_time(int(timedelta.total_seconds()), granularity=len(intervals)))


# list sub-command

def list_processes(args):
    ucomp_processes = []
    for p in psutil.process_iter():
        cmdline = p.cmdline()
        cmdline = '' if len(cmdline) == 0 else cmdline[-1]
        if p.name() == 'idl' and cmdline.startswith('ucomp'):
            ucomp_processes.append({'cmdline': cmdline,
                                    'pid': p.pid,
                                    'start_time': p.create_time()})
    if len(ucomp_processes) == 0:
        print('no UCoMP processes currently running')
        return

    now = datetime.datetime.now()

    for p in ucomp_processes:
        started = datetime.datetime.fromtimestamp(p['start_time'])
        time_running = now - started
        start_time = started.strftime("%Y-%m-%d %H:%M:%S")
        print('[%d] (%s running %s): %s' % (p['pid'],
                                            start_time,
                                            format_timedelta(time_running), p['cmdline']))


# validate sub-command

def validate(args):
    if len(args.dates) == 0:
        args.parser.error('too few arguments')

    cmd = [os.path.join(PIPELINE_DIR,
                        'bin',
                        'ucomp_validate_dates.sh'),
           args.flags,
           ','.join(args.dates)]

    process = subprocess.Popen(cmd, stderr=subprocess.STDOUT)
    print('[%d] %s' % (process.pid, ' '.join(cmd)))
    if not args.no_wait:
        terminated = wait_for(process)


# log sub-command

def prune_logfiles(files, max_version):
    version_re = re.compile('\d+')
    for f in files:
        versions = glob.glob('%s.*' % f)
        for v in versions:
            n = v[len(f) + 1:]
            if version_re.match(n):
                if int(n) > max_version:
                    file_to_delete = '%s.%s' % (f, n)
                    print('rm %s' % file_to_delete)
                    os.remove(file_to_delete)


def filter_file(logfile, level_index, follow):
    loglevel_filter = '|'.join(LEVELS[level_index:])
    loglevel_prog = re.compile('.*(%s):.*' % loglevel_filter)
    logstart_prog = re.compile('\[\d+\] \d{8}.\d{6}')

    matched_last_line = False

    line = 'not empty'

    try:
        with open(logfile, 'r') as f:
            while follow or line != '':
                line = f.readline()
                if line == '':
                    try:
                        time.sleep(POLL_SECS)
                    except (IOError, KeyboardInterrupt):
                        return
                    continue

                if loglevel_prog.match(line):
                    matched_last_line = True
                    try:
                        print(line.rstrip())
                    except (IOError, KeyboardInterrupt):
                        return
                else:
                    if matched_last_line:
                        if logstart_prog.match(line):
                            matched_last_line = False
                        else:
                            try:
                                print(line.rstrip())
                            except (IOError, KeyboardInterrupt):
                                return
    except IOError:
        print('Problem reading %s' % logfile)


def filter_log(args):
    date_re = '^\d{8}$'
    date_prog = re.compile(date_re)

    logfiles = []
    for f in args.logfiles:
        if date_prog.match(f):
            path1 = os.path.join(LOG_DIR, f + '.log')
            if os.path.isfile(path1):
                logfiles.append(path1)
            else:
                path2 = os.path.join(LOG_DIR, f + '.ucomp.eod.log')
                if os.path.isfile(path2):
                    logfiles.append(path2)
                else:
                    parser.error(f + ' does not exist')
        else:
            logfiles.append(f)

    follow = args.follow
    if follow and len(logfiles) > 1:
        print('cannot follow multiple files')
        return

    if args.prune is not None:
        prune_logfiles(logfiles, int(args.prune))
        return

    # default is to not filter
    if args.level:
        level = args.level.upper()
    elif args.critical:
        level = 'CRITICAL'
    elif args.error:
        level = 'ERROR'
    elif args.warn:
        level = 'WARN'
    elif args.info:
        level = 'INFO'
    else:
        level = 'DEBUG'

    try:
        level_index = LEVELS.index(level)
    except ValueError:
        print('invalid level: %s' % level)
        parser.print_help()
        return

    is_first = False
    for i, f in enumerate(logfiles):
        if len(logfiles) > 1:
            if i != 0: print('')
            print(f)
            print('-' * len(f))
        filter_file(f, level_index, follow)



# realtime, eod, and calibrate sub-commands

def parse_date_expr(date_expr):
    dates = []

    try:
        for de in date_expr.split(','):
            d = de.split('-')
            if len(d) not in [1, 2]:
                print(f'invalid syntax: {de}')
                return []

            if len(d) == 1:
                date_string = d[0]
                date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                dates.append(date.strftime(DATE_FORMAT))

            if len(d) == 2:
                date_string = d[0]
                date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                date_string = d[1]
                end_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
                if date > end_date:
                    print(f'invalid date range {de}')
                    return []
                while date.strftime(DATE_FORMAT) != end_date.strftime(DATE_FORMAT):
                    dates.append(date.strftime(DATE_FORMAT))
                    date = date + datetime.timedelta(days=1)
    except ValueError:
        print(f'invalid date syntax: {date_string}')
        return []

    return dates


def process_eod(args):
    launch_processes(args, 'ucomp_eod.sh')

def process_rt(args):
    launch_processes(args, 'ucomp_realtime.sh')

def process_cal(args):
    launch_processes(args, 'ucomp_calibrate.sh')


def launch_processes(args, routine):
    if len(args.dates) == 0:
        args.parser.error('too few arguments')

    dates = parse_date_expr(','.join(args.dates))

    if len(dates) != 1 and routine == 'ucomp_realtime.sh':
        args.parser.error('realtime mode is only valid for a single date')

    for d in dates:
        cmd = [os.path.join(PIPELINE_DIR,
                            'bin',
                            routine),
               args.flags,
               d]

        process = subprocess.Popen(cmd, stderr=subprocess.STDOUT)
        print('[%d] %s' % (process.pid, ' '.join(cmd)))
        if not args.no_wait:
            terminated = wait_for(process)
            if terminated: break


def wait_for(process):
    '''Wait for the given process to finish. Returns true if the process was
       terminated by a keyboard interrupt.'''
    try:
        process.wait()
        return 0
    except KeyboardInterrupt:
        print('killing process %d' % process.pid)
        process.kill()
        return 1


# archive sub-command

def archive(args):
    if len(args.dates) == 0:
        args.parser.error('too few arguments')

    dates = parse_date_expr(','.join(args.dates))

    for d in dates:
        cmd = [os.path.join(PIPELINE_DIR,
                            'bin',
                            'ucomp_archive.sh'),
               args.flags,
               d]

        process = subprocess.Popen(cmd, stderr=subprocess.STDOUT)
        print('[%d] %s' % (process.pid, ' '.join(cmd)))
        terminated = wait_for(process)
        if terminated: break


# simulate sub-command

def simulate(args):
    if len(args.dates) == 0:
        args.parser.error('too few arguments')

    dates = parse_date_expr(','.join(args.dates))

    if len(dates) != 1:
        args.parser.error('simulator is only valid for a single date')

    # read config file to get options
    pipeline_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    config_basename = 'ucomp.%s.cfg' % args.flags
    config_filename = os.path.join(pipeline_dir, 'config', config_basename)

    config = configparser.ConfigParser()
    config.read(config_filename)

    depot_basedir = config.get('testing', 'depot_basedir')
    raw_basedir = config.get('raw', 'basedir')
    raw_dir = os.path.join(raw_basedir, dates[0])

    arrival_interval = config.get('testing', 'arrival_interval')
    launch_interval = config.get('testing', 'launch_interval')

    # launch processing simulator
    processing_cmd = [os.path.join(pipeline_dir, 'bin', 'ucomp_simulate_processing'),
                      '-f', args.flags,
                      '--launch-interval', '%f' % launch_interval,
                      args.date]
    if args.no_eod:
        processing_cmd.insert(2, '--no-eod')
    processing_process = subprocess.Popen(processing_cmd)

    time.sleep(5.0)

    # launch incoming data simulator
    data_cmd = [os.path.join(pipeline_dir, 'bin', 'ucomp_simulate_data'),
                '-r', raw_dir,
                '--arrival-interval', '%f' % arrival_interval,
                os.path.join(depot_basedir, args.date)]
    data_process = subprocess.Popen(data_cmd)

    try:
        while True:
            time.sleep(1.0)
    except KeyboardInterrupt:
        print('killing data (%d) and processing (%d) subprocesses...' % (data_process.pid, processing_process.pid))
        processing_process.kill()
        data_process.kill()

if __name__ == '__main__':
    name = 'UCoMP pipeline @GIT_VERSION@ [@GIT_REVISION@] (@GIT_BRANCH@)'

    parser = argparse.ArgumentParser(description=name)

    # top-level options
    parser.add_argument('-v', '--version',
                        action='version',
                        version=name)

    subparsers = parser.add_subparsers(help='sub-command help')

    date_help = '''dates to run on in the form YYYYMMDD including lists (using
                   commas) and ranges (using hyphens where end date is not
                   included)
                '''
    flags_help = '''FLAGS section of config filename, i.e., file in config/
                    directory matching ucomp.FLAGS.cfg will be used'''

    # list sub-command
    list_parser = subparsers.add_parser('list',
                                        help='list UCoMP processes')
    list_parser.set_defaults(func=list_processes, parser=list_parser)

    # validate sub-command
    validate_parser = subparsers.add_parser('validate',
                                            help='validate previously processed dates')
    validate_parser.add_argument('dates', type=str, nargs='*', help=date_help,
                                 metavar='date-expr')

    validate_parser.add_argument('-f', '--flags', type=str, help=flags_help,
                                 default='latest')
    validate_parser.set_defaults(func=validate, parser=validate_parser)

    # log sub-command
    log_parser = subparsers.add_parser('log',
                                       help='filter/display log output')
    log_parser.add_argument('logfiles', nargs='+',
                            help='UCoMP log filenames or dates')
    level_help = 'filter level: DEBUG INFO WARN ERROR CRITICAL (default DEBUG)'
    log_parser.add_argument('-l', '--level',
                            help=level_help)
    prune_help = 'prune rotated logs with versions higher than MAX_VERSION'
    log_parser.add_argument('-p', '--prune',
                            help=prune_help,
                            metavar='MAX_VERSION')
    log_parser.add_argument('-f', '--follow',
                            help='output appended data as file grows',
                            action='store_true')
    log_parser.add_argument('-d', '--debug',
                            help='DEBUG filter level',
                            action='store_true')
    log_parser.add_argument('-i', '--info',
                            help='INFO filter level',
                            action='store_true')
    log_parser.add_argument('-w', '--warn',
                            help='WARN filter level',
                            action='store_true')
    log_parser.add_argument('-e', '--error',
                            help='ERROR filter level',
                            action='store_true')
    log_parser.add_argument('-c', '--critical',
                            help='CRITICAL filter level',
                            action='store_true')
    log_parser.set_defaults(func=filter_log, parser=log_parser)

    # eod, rt, cal sub-commands
    eod_parser = subparsers.add_parser('end-of-day', aliases=['eod'],
                                       help='run end-of-day pipeline')
    rt_parser = subparsers.add_parser('realtime', aliases=['rt'],
                                      help='run realtime pipeline')
    cal_parser = subparsers.add_parser('calibration', aliases=['cal'],
                                       help='run calibration')

    eod_parser.add_argument('dates', type=str, nargs='*', help=date_help,
                            metavar='date-expr')
    rt_parser.add_argument('dates', type=str, nargs='*', help=date_help,
                            metavar='date-expr')
    cal_parser.add_argument('dates', type=str, nargs='*', help=date_help,
                            metavar='date-expr')

    eod_parser.add_argument('-f', '--flags', type=str, help=flags_help,
                            default='latest')
    rt_parser.add_argument('-f', '--flags', type=str, help=flags_help,
                           default='latest')
    cal_parser.add_argument('-f', '--flags', type=str, help=flags_help,
                            default='latest')

    nowait_help = 'set to run all dates simultaneously'
    eod_parser.add_argument('--no-wait', action='store_true', help=nowait_help)
    rt_parser.add_argument('--no-wait', action='store_true', help=nowait_help)
    cal_parser.add_argument('--no-wait', action='store_true', help=nowait_help)

    eod_parser.set_defaults(func=process_eod, parser=eod_parser)
    rt_parser.set_defaults(func=process_rt, parser=rt_parser)
    cal_parser.set_defaults(func=process_cal, parser=cal_parser)

    # archive sub-command
    archive_parser = subparsers.add_parser('archive',
                                           help='archive files to HPSS')
    archive_parser.add_argument('dates', type=str, nargs='*', help=date_help,
                                metavar='date-expr')
    archive_parser.add_argument('-f', '--flags', type=str, help=flags_help,
                                default='latest')
    archive_parser.set_defaults(func=archive, parser=archive_parser)

    # simulate sub-command
    simulate_parser = subparsers.add_parser('simulate',
                                            help='simulate realtime processing')
    simulate_parser.add_argument('dates', type=str, nargs='*', help=date_help,
                                 metavar='date-expr')
    simulate_parser.add_argument('-f', '--flags', type=str, help=flags_help,
                                default='latest')
    simulate_parser.add_argument('--no-eod', action='store_true',
                                 help='set to not launch end-of-day processing')
    simulate_parser.set_defaults(func=simulate, parser=simulate_parser)

    # parse args and call appropriate sub-command
    args = parser.parse_args()
    args.func(args)
